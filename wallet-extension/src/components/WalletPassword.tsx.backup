import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { motion } from 'framer-motion';
import { ArrowLeft, Eye, EyeOff, Check, X, Shield, Lock, Fingerprint } from 'lucide-react';
import { PasskeyModal } from './ui/PasskeyModal';

interface WalletPasswordProps {
  onBack: () => void;
  onContinue: (password: string, enableFingerprint?: boolean) => void;
  title?: string;
  description?: string;
  isImport?: boolean;
  mnemonic?: string;
}

interface PasswordRequirement {
  key: string;
  test: (password: string) => boolean;
  label: string;
}

export const WalletPassword: React.FC<WalletPasswordProps> = ({
  onBack,
  onContinue,
  title,
  description,
  isImport = false,
  mnemonic
}) => {
  const { t } = useTranslation();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [authMode, setAuthMode] = useState<'password' | 'passkey'>('password');
  const [loading, setLoading] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [showPasskeyModal, setShowPasskeyModal] = useState(false);

  const requirements: PasswordRequirement[] = [
    {
      key: 'length',
      test: (pwd) => pwd.length >= 8,
      label: t('createWallet.passwordLength')
    },
    {
      key: 'lowercase',
      test: (pwd) => /[a-z]/.test(pwd),
      label: t('createWallet.passwordLowercase')
    },
    {
      key: 'uppercase',
      test: (pwd) => /[A-Z]/.test(pwd),
      label: t('createWallet.passwordUppercase')
    },
    {
      key: 'number',
      test: (pwd) => /\d/.test(pwd),
      label: t('createWallet.passwordNumber')
    },
    {
      key: 'special',
      test: (pwd) => /[!@#$%^&*(),.?":{}|<>]/.test(pwd),
      label: t('createWallet.passwordSpecial')
    }
  ];

  const getPasswordStrength = (password: string): number => {
    const passedRequirements = requirements.filter(req => req.test(password)).length;
    return Math.round((passedRequirements / requirements.length) * 100);
  };

  const getStrengthLabel = (strength: number): string => {
    if (strength < 40) return t('createWallet.passwordWeak');
    if (strength < 60) return t('createWallet.passwordFair');
    if (strength < 80) return t('createWallet.passwordGood');
    return t('createWallet.passwordStrong');
  };

  const getStrengthColor = (strength: number): string => {
    if (strength < 40) return 'bg-red-500';
    if (strength < 60) return 'bg-yellow-500';
    if (strength < 80) return 'bg-blue-500';
    return 'bg-green-500';
  };

  useEffect(() => {
    setPasswordStrength(getPasswordStrength(password));
  }, [password]);

  const isPasswordValid = (): boolean => {
    return requirements.every(req => req.test(password));
  };

  const passwordsMatch = (): boolean => {
    return password === confirmPassword && confirmPassword.length > 0;
  };

  const canContinue = (): boolean => {
    if (authMode === 'passkey') {
      return !loading;
    }
    return isPasswordValid() && passwordsMatch() && !loading;
  };

  const handleContinue = async () => {
    if (!canContinue()) return;

    if (authMode === 'passkey') {
      setShowPasskeyModal(true);
      return;
    }

    setLoading(true);

    try {
      // Add a small delay for UX
      await new Promise(resolve => setTimeout(resolve, 500));
      onContinue(password, false);
    } catch (error) {
      console.error('Error in password setup:', error);
    } finally {
      setLoading(false);
    }
  };

  const handlePasskeySuccess = () => {
    setShowPasskeyModal(false);
    onContinue('', true);
  };

  const handlePasskeyCancel = () => {
    setShowPasskeyModal(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && canContinue()) {
      handleContinue();
    }
  };

  return (
    <div className="relative w-full h-screen max-w-md mx-auto bg-gradient-to-b from-gray-900 via-black to-gray-900 overflow-hidden rounded-2xl sm:rounded-none font-montserrat">
      {/* Header */}
      <div className="relative z-10 flex items-center justify-between p-4">
        <motion.button
          onClick={onBack}
          className="w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 flex items-center justify-center transition-all duration-200 hover:scale-110"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
        >
          <ArrowLeft className="w-5 h-5 text-white" />
        </motion.button>
      </div>

      {/* Main Content */}
      <div className="relative z-10 flex flex-col h-full px-6 pb-6">
        {/* Icon and Title Section */}
        <div className="flex flex-col items-center justify-center pt-4 pb-8 space-y-4">
          {/* Lock Icon */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            className="relative"
          >
            <div className="w-16 h-16 rounded-3xl bg-gray-800/80 backdrop-blur-sm border border-gray-700/50 flex items-center justify-center">
              <Lock className="w-6 h-6 text-white" />
            </div>
            {/* Glow effect */}
            <div className="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-500/20 to-pink-500/20 blur-xl"></div>
          </motion.div>

          {/* Title and Description */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="text-center space-y-2"
          >
            <h1 className="text-xl font-bold text-white">
              {title || t('createWallet.title')}
            </h1>
            <p className="text-gray-400 text-sm px-4 leading-relaxed">
              {description || t('createWallet.description')}
            </p>
          </motion.div>
        </div>

        {/* Authentication Mode Selection */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.15 }}
          className="flex bg-gray-800/40 backdrop-blur-sm border border-gray-700/30 rounded-2xl p-1"
        >
          <button
            onClick={() => setAuthMode('password')}
            className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${
              authMode === 'password'
                ? 'bg-purple-500/80 text-white shadow-lg'
                : 'text-gray-400 hover:text-gray-300'
            }`}
          >
            <Lock className="w-4 h-4" />
            <span>{t('auth.password')}</span>
          </button>
          <button
            onClick={() => setAuthMode('passkey')}
            className={`flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${
              authMode === 'passkey'
                ? 'bg-purple-500/80 text-white shadow-lg'
                : 'text-gray-400 hover:text-gray-300'
            }`}
          >
            <Fingerprint className="w-4 h-4" />
            <span>{t('auth.biometric')}</span>
          </button>
        </motion.div>

        {/* Password Form */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="flex-1 space-y-6"
        >
          {/* Password Mode Content */}
          {authMode === 'password' && (
            <>
              {/* Password Input */}
              <div className="space-y-4">
                <div className="relative">
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    {t('createWallet.passwordPlaceholder')}
                  </label>
                  <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={t('createWallet.passwordPlaceholder')}
                  className="w-full h-12 px-4 pr-12 bg-gray-800/60 backdrop-blur-sm border border-gray-700/50 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:border-purple-500/50 focus:bg-gray-800/80 transition-all duration-200"
                  autoComplete="new-password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
                  </div>
                </div>

            {/* Password Strength */}
            {password && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                className="space-y-3"
              >
                <div className="flex items-center justify-between">
                  <span className="text-xs text-gray-400">Password Strength</span>
                  <span className="text-xs font-medium text-white">
                    {getStrengthLabel(passwordStrength)}
                  </span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <motion.div
                    className={`h-2 rounded-full transition-all duration-300 ${getStrengthColor(passwordStrength)}`}
                    initial={{ width: 0 }}
                    animate={{ width: `${passwordStrength}%` }}
                  />
                </div>
              </motion.div>
            )}

            {/* Requirements */}
            {password && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                className="space-y-2"
              >
                {requirements.map((req) => (
                  <div key={req.key} className="flex items-center space-x-2">
                    <div className={`w-4 h-4 rounded-full flex items-center justify-center ${
                      req.test(password) ? 'bg-green-500' : 'bg-gray-600'
                    }`}>
                      {req.test(password) ? (
                        <Check className="w-2.5 h-2.5 text-white" />
                      ) : (
                        <X className="w-2.5 h-2.5 text-gray-400" />
                      )}
                    </div>
                    <span className={`text-xs ${
                      req.test(password) ? 'text-green-400' : 'text-gray-400'
                    }`}>
                      {req.label}
                    </span>
                  </div>
                ))}
                {isPasswordValid() && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex items-center space-x-2 text-green-400"
                  >
                    <Check className="w-4 h-4" />
                    <span className="text-xs font-medium">{t('createWallet.passwordValid')}</span>
                  </motion.div>
                )}
              </motion.div>
            )}
          </div>

          {/* Confirm Password */}
          <div className="relative">
            <label className="block text-sm font-medium text-gray-300 mb-2">
              {t('createWallet.confirmPasswordPlaceholder')}
            </label>
            <div className="relative">
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={t('createWallet.confirmPasswordPlaceholder')}
                className="w-full h-12 px-4 pr-12 bg-gray-800/60 backdrop-blur-sm border border-gray-700/50 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:border-purple-500/50 focus:bg-gray-800/80 transition-all duration-200"
                autoComplete="new-password"
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors"
              >
                {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              </button>
            </div>

            {/* Password Match Indicator */}
            {confirmPassword && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className={`flex items-center space-x-2 mt-2 ${
                  passwordsMatch() ? 'text-green-400' : 'text-red-400'
                }`}
              >
                {passwordsMatch() ? (
                  <Check className="w-4 h-4" />
                ) : (
                  <X className="w-4 h-4" />
                )}
                <span className="text-xs">
                  {passwordsMatch() ? t('createWallet.passwordMatch') : t('createWallet.passwordNoMatch')}
                </span>
              </motion.div>
            )}
              </div>
            </>
          )}

          {/* Passkey Mode Content */}
          {authMode === 'passkey' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center space-y-6 py-8"
            >
              <div className="w-20 h-20 mx-auto rounded-full bg-purple-500/20 flex items-center justify-center">
                <Fingerprint className="w-10 h-10 text-purple-400" />
              </div>
              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-white">{t('passkey.setupTitle')}</h3>
                <p className="text-gray-400 text-sm px-4">
                  {t('passkey.setupDescription')}
                </p>
              </div>
              <div className="space-y-3 text-sm text-gray-300">
                <div className="flex items-center justify-center space-x-2">
                  <Check className="w-4 h-4 text-green-400" />
                  <span>{t('passkey.convenientTitle')}</span>
                </div>
                <div className="flex items-center justify-center space-x-2">
                  <Check className="w-4 h-4 text-green-400" />
                  <span>{t('passkey.secureTitle')}</span>
                </div>
                <div className="flex items-center justify-center space-x-2">
                  <Check className="w-4 h-4 text-green-400" />
                  <span>{t('auth.securityEnhanced')}</span>
                </div>
              </div>
            </motion.div>
          )}

          {/* Security Notice */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="flex items-start space-x-3 p-4 bg-amber-500/10 border border-amber-500/20 rounded-2xl"
          >
            <Shield className="w-4 h-4 text-amber-400 mt-0.5 flex-shrink-0" />
            <div className="space-y-1">
              <p className="text-amber-300 font-medium text-sm">{t('createWallet.securityTitle')}</p>
              <p className="text-amber-300/80 text-xs leading-relaxed">
                {t('createWallet.securityMessage')}
              </p>
            </div>
          </motion.div>

          {/* Continue Button */}
          <motion.button
            onClick={handleContinue}
            disabled={!canContinue()}
            className={`w-full h-12 rounded-2xl font-semibold text-white transition-all duration-200 ${
              canContinue()
                ? 'bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 shadow-lg hover:shadow-xl transform hover:scale-[1.02] active:scale-[0.98]'
                : 'bg-gray-700 cursor-not-allowed opacity-50'
            }`}
            whileHover={canContinue() ? { scale: 1.02 } : {}}
            whileTap={canContinue() ? { scale: 0.98 } : {}}
          >
            {loading ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                <span>Creating...</span>
              </div>
            ) : (
              authMode === 'passkey' ? t('passkey.setupNow') : t('createWallet.continue')
            )}
          </motion.button>
        </motion.div>
      </div>

      {/* Passkey Modal */}
      <PasskeyModal
        isOpen={showPasskeyModal}
        onSuccess={handlePasskeySuccess}
        onCancel={handlePasskeyCancel}
      />
    </div>
  );
};